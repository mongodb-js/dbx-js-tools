{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020
  },
  "plugins": [
    "simple-import-sort",
    "@typescript-eslint",
    "prettier",
    "unused-imports",
    "tsdoc"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "env": {
    "node": true,
    "mocha": true,
    "es6": true
  },
  "reportUnusedDisableDirectives": true,
  "rules": {
    "no-restricted-properties": [
      "error",
      {
        "object": "describe",
        "property": "only"
      },
      {
        "object": "it",
        "property": "only"
      },
      {
        "object": "context",
        "property": "only"
      }
    ],
    "no-restricted-globals": [
      "error",
      {
        "name": "clearTimeout",
        "message": "Use `import { clearTimeout } from 'timers';` instead"
      },
      {
        "name": "clearImmediate",
        "message": "Use `import { clearImmediate } from 'timers';` instead"
      },
      {
        "name": "clearInterval",
        "message": "Use `import { clearInterval } from 'timers';` instead"
      },
      {
        "name": "setTimeout",
        "message": "Use `import { setTimeout } from 'timers';` instead"
      },
      {
        "name": "setImmediate",
        "message": "Use `import { setImmediate } from 'timers';` instead"
      },
      {
        "name": "setInterval",
        "message": "Use `import { setInterval } from 'timers';` instead"
      }
    ],
    "prettier/prettier": "error",
    "tsdoc/syntax": "warn",
    "valid-typeof": "error",
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "@typescript-eslint/no-unused-expressions": "off",
    "@typescript-eslint/no-require-imports": "off",
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "strict": [
      "error",
      "global"
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": false,
        "fixStyle": "inline-type-imports"
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": ".",
            "message": "Please import directly from the relevant file instead."
          },
          {
            "name": "..",
            "message": "Please import directly from the relevant file instead."
          }
        ]
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "TSEnumDeclaration",
        "message": "Do not declare enums"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==/] Identifier[name='undefined']",
        "message": "Do not strictly check undefined"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==/] Literal[raw='null']",
        "message": "Do not strictly check null"
      },
      {
        "selector": "BinaryExpression[operator=/[=!]==?/] Literal[value='undefined']",
        "message": "Do not strictly check typeof undefined (NOTE: currently this rule only detects the usage of 'undefined' string literal so this could be a misfire)"
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_"
      }
    ]
  },
  "overrides": [
    {
      // Settings for typescript test files
      "files": [
        "test/**/*.ts"
      ],
      "parser": "@typescript-eslint/parser",
      "rules": {
        "no-console": "off",
        "no-restricted-syntax": "off",
        "typescript-eslint/ban-ts-comment": "off",
        "no-restricted-imports": "off"
      }
    },
    {
      // Settings for typescript source files
      "files": [
        "src/**/*.ts"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": [
          "./tsconfig.json"
        ]
      },
      "extends": [
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "rules": {
        "@typescript-eslint/restrict-plus-operands": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/return-await": [
          "error",
          "in-try-catch"
        ]
      }
    }
  ]
}
